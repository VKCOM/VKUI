import{k as R,j as t}from"./iframe-C2_PECK0.js";import{D as _,C as b}from"./constants-DdkjnEgz.js";import{g as x}from"./getFormFieldIconsPresets-CxAVhZ-l.js";import{c as w}from"./createStoryParameters-CcwS40kl.js";import{F as T}from"./FormItem-DxHbC0fS.js";import{u as P,C as S}from"./useChipsInput-BZpBNFOQ.js";const n=({value:e,defaultValue:s,onChange:d,getRef:F,inputValue:m,defaultInputValue:B,onInputChange:D,getOptionValue:C,getOptionLabel:f,getNewOptionData:c,disabled:a,allowClearButton:A,delimiter:g,...h})=>{const{value:l,addOptionFromInput:V,removeOption:y,clearOptions:I,inputRef:O,inputValue:r,onInputChange:q}=P({value:e,defaultValue:s,onChange:d,getOptionLabel:f,getOptionValue:C,getNewOptionData:c,inputValue:m,defaultInputValue:B,onInputChange:D,disabled:a,delimiter:g}),v=R(F,O);return t.jsx(S,{...h,disabled:a,value:l,clearButtonShown:A&&(!!l.length||!!r.length),onAddChipOption:V,onRemoveChipOption:y,onClear:I,getRef:v,inputValue:r,onInputChange:q})};try{n.displayName="ChipsInput",n.__docgenInfo={description:"",displayName:"ChipsInput",props:{allowClearButton:{defaultValue:null,description:"Если `true`, то справа будет отображаться кнопка для очистки значения.",name:"allowClearButton",required:!1,type:{name:"boolean"}},getRootRef:{defaultValue:null,description:"Ссылка на корневой элемент.",name:"getRootRef",required:!1,type:{name:"Ref<HTMLDivElement>"}},addOnBlur:{defaultValue:null,description:"Добавляет значение в список на событие `onBlur`.",name:"addOnBlur",required:!1,type:{name:"boolean"}},renderChip:{defaultValue:{value:"Используется [Chip](#/Chip)"},description:"Render prop функция для возврата своего компонента.",name:"renderChip",required:!1,type:{name:"RenderChip<Option>"}},clearButtonShown:{defaultValue:null,description:"Показывать ли кнопку для очистки значения.",name:"clearButtonShown",required:!1,type:{name:"boolean"}},clearButtonTestId:{defaultValue:null,description:"(e2e) testId кнопки очистки.",name:"clearButtonTestId",required:!1,type:{name:"string"}},ClearButton:{defaultValue:null,description:"Кастомная кнопка для очистки значения.\nДолжна принимать обязательное свойство `onClick`.",name:"ClearButton",required:!1,type:{name:"ComponentType<FormFieldClearButtonProps>"}},disabled:{defaultValue:null,description:"Блокировка взаимодействия с компонентом.",name:"disabled",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:"Выбранные опции.",name:"value",required:!1,type:{name:"Option[]"}},inputValue:{defaultValue:null,description:"Значение поля ввода.",name:"inputValue",required:!1,type:{name:"string"}},onInputChange:{defaultValue:null,description:"Обработчик изменения значения в поле ввода.",name:"onInputChange",required:!1,type:{name:"OnInputChange"}},delimiter:{defaultValue:null,description:`Символ или строка, которая будет использоваться как разделитель для автоматического создания опций из текста, введенного в поле ввода.
Принимает:
- \`string\` - простая строка
- \`RegExp\` - регулярное выражение
- \`string[]\` - массив строк, по которым нужно разелять ввод.

Работает в двух сценариях:
1. При вводе разделителя - текст до разделителя автоматически преобразуется в новую опцию.
   Например, при \`delimiter=","\` ввод "опция1," создаст опцию "опция1".

2. При вставке из буфера обмена - если вставляемый текст содержит разделители,
   он будет автоматически разбит на несколько опций.
   Например, при \`delimiter=","\` вставка "опция1,опция2,опция3" создаст
   три отдельные опции: "опция1", "опция2" и "опция3".`,name:"delimiter",required:!1,type:{name:"string | RegExp | string[]"}},getRef:{defaultValue:null,description:"",name:"getRef",required:!1,type:{name:"Ref<HTMLInputElement>"}},align:{defaultValue:null,description:"",name:"align",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"left"'},{value:'"right"'}]}},getOptionValue:{defaultValue:null,description:"Селектор значения.",name:"getOptionValue",required:!1,type:{name:"GetOptionValue<Option>"}},getOptionLabel:{defaultValue:null,description:"Селектор пользовательского представления.",name:"getOptionLabel",required:!1,type:{name:"GetOptionLabel<Option>"}},getNewOptionData:{defaultValue:null,description:"Функция для создания новой опции.",name:"getNewOptionData",required:!1,type:{name:"GetNewOptionData<Option>"}},defaultValue:{defaultValue:null,description:"Выбранные опции по умолчанию.",name:"defaultValue",required:!1,type:{name:"Option[]"}},onChange:{defaultValue:null,description:"Обработчик изменения выбранных опций.",name:"onChange",required:!1,type:{name:"OnChange<Option>"}},defaultInputValue:{defaultValue:null,description:"Значение поля ввода по умолчанию.",name:"defaultInputValue",required:!1,type:{name:"string"}},mode:{defaultValue:null,description:"Режим отображения.\n\n- `default` — показывает фон, обводку и, при наличии, текст-подсказку.\n- `plain` — показывает только текст-подсказку.",name:"mode",required:!1,type:{name:"enum",value:[{value:'"plain"'},{value:'"default"'}]}},status:{defaultValue:null,description:"Статус отображения поля в форме.",name:"status",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"error"'},{value:'"valid"'}]}},after:{defaultValue:null,description:"Добавляет иконку справа.\n\nРекомендации:\n\n- Используйте следующие размеры иконок `12` | `16` | `20` | `24` | `28`.\n- Используйте [IconButton](https://vkcom.github.io/VKUI/#/IconButton), если вам нужна иконка, реагируюущая на нажатие.",name:"after",required:!1,type:{name:"ReactNode"}},before:{defaultValue:null,description:"Добавляет иконку слева.\n\nРекомендации:\n\n- Используйте следующие размеры иконок `12` | `16` | `20` | `24` | `28`.\n- Используйте [IconButton](https://vkcom.github.io/VKUI/#/IconButton), если вам нужна иконка, реагирующая на нажатие.",name:"before",required:!1,type:{name:"ReactNode"}},maxHeight:{defaultValue:null,description:"Максимальная высота поля.",name:"maxHeight",required:!1,type:{name:"number"}}}}}catch{}const{fn:j}=__STORYBOOK_MODULE_TEST__,i=x(),L={title:"Forms/ChipsInput",component:n,parameters:w("ChipsInput",b,_),args:{onInputChange:j()},argTypes:{before:i,after:i}},u={render:e=>t.jsx(T,{top:"Добавьте любимые теги",htmlFor:"chips-input",style:{width:320},children:t.jsx(n,{...e,id:"chips-input"})})};var o,E,p;u.parameters={...u.parameters,docs:{...(o=u.parameters)==null?void 0:o.docs,source:{originalSource:`{
  render: args => <FormItem top="Добавьте любимые теги" htmlFor="chips-input" style={{
    width: 320
  }}>
      <ChipsInput {...args} id="chips-input" />
    </FormItem>
}`,...(p=(E=u.parameters)==null?void 0:E.docs)==null?void 0:p.source}}};const N=["Playground"],z=Object.freeze(Object.defineProperty({__proto__:null,Playground:u,__namedExportsOrder:N,default:L},Symbol.toStringTag,{value:"Module"}));export{n as C,u as P,z as a};

import{i as O,j as a}from"./iframe-DJZLDe2v.js";import{D as v,C as q}from"./constants-DdkjnEgz.js";import{g as b}from"./getFormFieldIconsPresets-DjCRbK-g.js";import{c as _}from"./createStoryParameters-CcwS40kl.js";import{F as R}from"./FormItem-CHGbR73-.js";import{u as T,C as L}from"./useChipsInput-CHDjDV6N.js";const n=({value:e,defaultValue:o,onChange:p,getRef:E,inputValue:s,defaultInputValue:d,onInputChange:F,getOptionValue:m,getOptionLabel:D,getNewOptionData:B,disabled:t,allowClearButton:f,delimiter:C,...c})=>{const{value:l,addOptionFromInput:A,removeOption:g,clearOptions:h,inputRef:V,inputValue:r,onInputChange:y}=T({value:e,defaultValue:o,onChange:p,getOptionLabel:D,getOptionValue:m,getNewOptionData:B,inputValue:s,defaultInputValue:d,onInputChange:F,disabled:t,delimiter:C}),I=O(E,V);return a.jsx(L,{...c,disabled:t,value:l,clearButtonShown:f&&(!!l.length||!!r.length),onAddChipOption:A,onRemoveChipOption:g,onClear:h,getRef:I,inputValue:r,onInputChange:y})};try{n.displayName="ChipsInput",n.__docgenInfo={description:"",displayName:"ChipsInput",props:{allowClearButton:{defaultValue:null,description:"Если `true`, то справа будет отображаться кнопка для очистки значения.",name:"allowClearButton",required:!1,type:{name:"boolean"}},getRootRef:{defaultValue:null,description:"Ссылка на корневой элемент.",name:"getRootRef",required:!1,type:{name:"Ref<HTMLDivElement>"}},addOnBlur:{defaultValue:null,description:"Добавляет значение в список на событие `onBlur`.",name:"addOnBlur",required:!1,type:{name:"boolean"}},renderChip:{defaultValue:{value:"Используется [Chip](#/Chip)"},description:"Render prop функция для возврата своего компонента.",name:"renderChip",required:!1,type:{name:"RenderChip<Option>"}},clearButtonShown:{defaultValue:null,description:"Показывать ли кнопку для очистки значения.",name:"clearButtonShown",required:!1,type:{name:"boolean"}},clearButtonTestId:{defaultValue:null,description:"(e2e) testId кнопки очистки.",name:"clearButtonTestId",required:!1,type:{name:"string"}},ClearButton:{defaultValue:null,description:"Кастомная кнопка для очистки значения.\nДолжна принимать обязательное свойство `onClick`.",name:"ClearButton",required:!1,type:{name:"ComponentType<FormFieldClearButtonProps>"}},chipsListLabel:{defaultValue:null,description:"`aria-label` для списка выбранных опций.",name:"chipsListLabel",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"Блокировка взаимодействия с компонентом.",name:"disabled",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:"Выбранные опции.",name:"value",required:!1,type:{name:"Option[]"}},delimiter:{defaultValue:null,description:`Символ или строка, которая будет использоваться как разделитель для автоматического создания опций из текста, введенного в поле ввода.
Принимает:
- \`string\` - простая строка
- \`RegExp\` - регулярное выражение
- \`string[]\` - массив строк, по которым нужно разелять ввод.

Работает в двух сценариях:
1. При вводе разделителя - текст до разделителя автоматически преобразуется в новую опцию.
   Например, при \`delimiter=","\` ввод "опция1," создаст опцию "опция1".

2. При вставке из буфера обмена - если вставляемый текст содержит разделители,
   он будет автоматически разбит на несколько опций.
   Например, при \`delimiter=","\` вставка "опция1,опция2,опция3" создаст
   три отдельные опции: "опция1", "опция2" и "опция3".`,name:"delimiter",required:!1,type:{name:"string | RegExp | string[]"}},onInputChange:{defaultValue:null,description:"Обработчик изменения значения в поле ввода.",name:"onInputChange",required:!1,type:{name:"OnInputChange"}},inputValue:{defaultValue:null,description:"Значение поля ввода.",name:"inputValue",required:!1,type:{name:"string"}},getRef:{defaultValue:null,description:"",name:"getRef",required:!1,type:{name:"Ref<HTMLInputElement>"}},align:{defaultValue:null,description:"",name:"align",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"left"'},{value:'"right"'}]}},getOptionValue:{defaultValue:null,description:"Селектор значения.",name:"getOptionValue",required:!1,type:{name:"GetOptionValue<Option>"}},getOptionLabel:{defaultValue:null,description:"Селектор пользовательского представления.",name:"getOptionLabel",required:!1,type:{name:"GetOptionLabel<Option>"}},getNewOptionData:{defaultValue:null,description:"Функция для создания новой опции.",name:"getNewOptionData",required:!1,type:{name:"GetNewOptionData<Option>"}},defaultValue:{defaultValue:null,description:"Выбранные опции по умолчанию.",name:"defaultValue",required:!1,type:{name:"Option[]"}},onChange:{defaultValue:null,description:"Обработчик изменения выбранных опций.",name:"onChange",required:!1,type:{name:"OnChange<Option>"}},defaultInputValue:{defaultValue:null,description:"Значение поля ввода по умолчанию.",name:"defaultInputValue",required:!1,type:{name:"string"}},status:{defaultValue:null,description:"Статус отображения поля в форме.",name:"status",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"error"'},{value:'"valid"'}]}},mode:{defaultValue:null,description:"Режим отображения.\n\n- `default` — показывает фон, обводку и, при наличии, текст-подсказку.\n- `plain` — показывает только текст-подсказку.",name:"mode",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"plain"'}]}},after:{defaultValue:null,description:"Добавляет иконку справа.\n\nРекомендации:\n\n- Используйте следующие размеры иконок `12` | `16` | `20` | `24` | `28`.\n- Используйте [IconButton](https://vkui.io/components/icon-button), если вам нужна иконка, реагируюущая на нажатие.",name:"after",required:!1,type:{name:"ReactNode"}},before:{defaultValue:null,description:"Добавляет иконку слева.\n\nРекомендации:\n\n- Используйте следующие размеры иконок `12` | `16` | `20` | `24` | `28`.\n- Используйте [IconButton](https://vkui.io/components/icon-button), если вам нужна иконка, реагирующая на нажатие.",name:"before",required:!1,type:{name:"ReactNode"}},maxHeight:{defaultValue:null,description:"Максимальная высота поля.",name:"maxHeight",required:!1,type:{name:"number"}}}}}catch{}const{fn:x}=__STORYBOOK_MODULE_TEST__,i=b(),S={title:"Forms/ChipsInput",component:n,parameters:_("ChipsInput",q,v),args:{onInputChange:x()},argTypes:{before:i,after:i},tags:["Формы и поля ввода"]},w=[{label:"Тег 1",value:"tag-1"},{label:"Тег 2",value:"tag-2"}],u={render:e=>a.jsx(R,{top:"Добавьте любимые теги",htmlFor:"chips-input",style:{width:320},children:a.jsx(n,{...e,"aria-label":"Добавьте любимые теги",id:"chips-input"})}),args:{defaultValue:w}};u.parameters={...u.parameters,docs:{...u.parameters?.docs,source:{originalSource:`{
  render: args => <FormItem top="Добавьте любимые теги" htmlFor="chips-input" style={{
    width: 320
  }}>
      <ChipsInput {...args} aria-label="Добавьте любимые теги" id="chips-input" />
    </FormItem>,
  args: {
    defaultValue: DEFAULT_TAGS
  }
}`,...u.parameters?.docs?.source}}};const P=["Playground"],U=Object.freeze(Object.defineProperty({__proto__:null,Playground:u,__namedExportsOrder:P,default:S},Symbol.toStringTag,{value:"Module"}));export{n as C,u as P,U as a};

{
  "version": 3,
  "sources": ["global-externals:react", "global-externals:@storybook/manager-api", "global-externals:@storybook/components", "../../../../../tools/storybook-addon-cartesian/src/OptionsContainer.tsx", "../../../../../tools/storybook-addon-cartesian/src/constants.ts", "../../../../../tools/storybook-addon-cartesian/src/Tool.tsx", "../../../../../tools/storybook-addon-cartesian/src/preset/manager.tsx"],
  "sourcesContent": ["export default __REACT__;\nconst { Children, Component, Fragment, Profiler, PureComponent, StrictMode, Suspense, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, cloneElement, createContext, createElement, createFactory, createRef, forwardRef, isValidElement, lazy, memo, useCallback, useContext, useDebugValue, useEffect, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState, version } = __REACT__;\nexport { Children, Component, Fragment, Profiler, PureComponent, StrictMode, Suspense, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, cloneElement, createContext, createElement, createFactory, createRef, forwardRef, isValidElement, lazy, memo, useCallback, useContext, useDebugValue, useEffect, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState, version };", "export default __STORYBOOKAPI__;\nconst { ActiveTabs, Consumer, ManagerContext, Provider, addons, combineParameters, controlOrMetaKey, controlOrMetaSymbol, eventMatchesShortcut, eventToShortcut, isMacLike, isShortcutTaken, keyToSymbol, merge, mockChannel, optionOrAltSymbol, shortcutMatchesShortcut, shortcutToHumanString, types, useAddonState, useArgTypes, useArgs, useChannel, useGlobalTypes, useGlobals, useParameter, useSharedState, useStoryPrepared, useStorybookApi, useStorybookState } = __STORYBOOKAPI__;\nexport { ActiveTabs, Consumer, ManagerContext, Provider, addons, combineParameters, controlOrMetaKey, controlOrMetaSymbol, eventMatchesShortcut, eventToShortcut, isMacLike, isShortcutTaken, keyToSymbol, merge, mockChannel, optionOrAltSymbol, shortcutMatchesShortcut, shortcutToHumanString, types, useAddonState, useArgTypes, useArgs, useChannel, useGlobalTypes, useGlobals, useParameter, useSharedState, useStoryPrepared, useStorybookApi, useStorybookState };", "export default __STORYBOOKCOMPONENTS__;\nconst { A, ActionBar, AddonPanel, Badge, Bar, Blockquote, Button, Code, DL, Div, DocumentWrapper, ErrorFormatter, FlexBar, Form, H1, H2, H3, H4, H5, H6, HR, IconButton, IconButtonSkeleton, Icons, Img, LI, Link, ListItem, Loader, OL, P, Placeholder, Pre, ResetWrapper, ScrollArea, Separator, Spaced, Span, StorybookIcon, StorybookLogo, Symbols, SyntaxHighlighter, TT, TabBar, TabButton, TabWrapper, Table, Tabs, TabsState, TooltipLinkList, TooltipMessage, TooltipNote, UL, WithTooltip, WithTooltipPure, Zoom, codeCommon, components, createCopyToClipboardFunction, getStoryHref, icons, interleaveSeparators, nameSpaceClassNames, resetComponents, withReset } = __STORYBOOKCOMPONENTS__;\nexport { A, ActionBar, AddonPanel, Badge, Bar, Blockquote, Button, Code, DL, Div, DocumentWrapper, ErrorFormatter, FlexBar, Form, H1, H2, H3, H4, H5, H6, HR, IconButton, IconButtonSkeleton, Icons, Img, LI, Link, ListItem, Loader, OL, P, Placeholder, Pre, ResetWrapper, ScrollArea, Separator, Spaced, Span, StorybookIcon, StorybookLogo, Symbols, SyntaxHighlighter, TT, TabBar, TabButton, TabWrapper, Table, Tabs, TabsState, TooltipLinkList, TooltipMessage, TooltipNote, UL, WithTooltip, WithTooltipPure, Zoom, codeCommon, components, createCopyToClipboardFunction, getStoryHref, icons, interleaveSeparators, nameSpaceClassNames, resetComponents, withReset };", "import * as React from 'react';\nimport { OptionNamesProp, OptionsProp } from './types';\n\nconst ContainerStyle: React.CSSProperties = {\n  margin: '6px',\n  display: 'flex',\n  flexDirection: 'column',\n};\nconst ItemStyle: React.CSSProperties = {\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  margin: '2px 0',\n};\n\ninterface OptionsContainerProps {\n  options: OptionsProp;\n  checkedOptions: OptionNamesProp;\n  onCheckedChange(actual: OptionNamesProp): void;\n}\n\nexport const OptionsContainer = ({\n  options,\n  checkedOptions,\n  onCheckedChange,\n}: OptionsContainerProps) => {\n  const changeChecked = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const name = e.target.name;\n    const actualCheckedOptions = checkedOptions.includes(name)\n      ? checkedOptions.filter((optionName) => optionName !== name)\n      : [...checkedOptions, name];\n\n    onCheckedChange(actualCheckedOptions);\n  };\n\n  return (\n    <div style={ContainerStyle}>\n      {Object.keys(options).map((name) => {\n        return (\n          <label style={ItemStyle} key={name}>\n            {name}\n            <input\n              id={name}\n              name={name}\n              type=\"checkbox\"\n              onChange={changeChecked}\n              checked={checkedOptions.includes(name)}\n            />\n          </label>\n        );\n      })}\n    </div>\n  );\n};\n", "export const ADDON_ID = 'storybook/addon-cartesian';\nexport const TOOL_ID = `${ADDON_ID}/tool`;\n\nexport const BooleanOpts = [true, false];\n", "import * as React from 'react';\nimport { IconButton, Icons, WithTooltipPure } from '@storybook/components';\nimport { useArgs, useArgTypes, useParameter } from '@storybook/manager-api';\nimport { ArgTypes } from '@storybook/types';\nimport { OptionsContainer } from './OptionsContainer';\nimport { BooleanOpts } from './constants';\nimport { CartesianConfigParameter, OptionNamesProp, OptionsProp } from './types';\n\nconst getOptionsFromArgTypes = (argTypes: ArgTypes) =>\n  Object.entries(argTypes).reduce<OptionsProp>((options, [argName, argValue]) => {\n    if ('boolean' === argValue.control?.type || argValue.options?.length > 0) {\n      options[argName] = argValue.control?.type === 'boolean' ? BooleanOpts : argValue.options;\n    }\n    return options;\n  }, {});\n\nconst getCartesianFromOptions = (options: OptionsProp, checkedOptions: OptionNamesProp) =>\n  Object.keys(options)\n    .filter((optionName) => checkedOptions.includes(optionName))\n    .reduce<OptionsProp>((actualOptions, optionName) => {\n      actualOptions[optionName] = options[optionName];\n      return actualOptions;\n    }, {});\n\nexport const Tool = () => {\n  const argTypes = useArgTypes();\n  const [, updateArgs] = useArgs();\n  const fileName = useParameter('fileName');\n  const [isVisible, setIsVisible] = React.useState(false);\n  const [checkedOptions, setCheckedOptions] = React.useState<OptionNamesProp>([]);\n  const cartesianConfig = useParameter<CartesianConfigParameter>('cartesian');\n\n  React.useEffect(() => {\n    // \u041F\u0440\u0438 \u0441\u043C\u0435\u043D\u0435 story \u0441\u0431\u0440\u0430\u0441\u044B\u0432\u0430\u0435\u043C \u043C\u0430\u0441\u0441\u0438\u0432 \u0441 \u0432\u044B\u0431\u0440\u0430\u043D\u043D\u044B\u043C\u0438 \u043F\u0440\u043E\u043F\u0430\u043C\u0438\n    setCheckedOptions([]);\n  }, [fileName]);\n\n  const options = React.useMemo(() => getOptionsFromArgTypes(argTypes), [argTypes]);\n\n  const onCheckedChange = (actualChecked: OptionNamesProp) => {\n    setCheckedOptions(actualChecked);\n    updateArgs({\n      cartesian: actualChecked.length ? getCartesianFromOptions(options, actualChecked) : null,\n    });\n  };\n\n  if (cartesianConfig?.disable) {\n    return null;\n  }\n\n  return (\n    <WithTooltipPure\n      trigger=\"click\"\n      placement=\"bottom\"\n      visible={isVisible}\n      closeOnOutsideClick\n      onVisibleChange={setIsVisible}\n      tooltip={() => (\n        <OptionsContainer\n          options={options}\n          checkedOptions={checkedOptions}\n          onCheckedChange={onCheckedChange}\n        />\n      )}\n    >\n      <IconButton>\n        <Icons icon=\"grid\" />\n        &nbsp; cartesian\n      </IconButton>\n    </WithTooltipPure>\n  );\n};\n", "import React from 'react';\nimport { addons, types } from '@storybook/manager-api';\nimport { Tool } from '../Tool';\nimport { ADDON_ID, TOOL_ID } from '../constants';\n\naddons.register(ADDON_ID, (api) => {\n  addons.add(TOOL_ID, {\n    type: types.TOOL,\n    paramKey: 'cartesian',\n    title: 'Components Variants',\n    match: ({ viewMode }) => !!(viewMode && viewMode.match(/^(story|docs)$/)),\n    render: () => {\n      if (!api.getCurrentStoryData()) {\n        return null;\n      }\n      return <Tool />;\n    },\n  });\n});\n"],
  "mappings": "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",
  "names": ["react_default", "Children", "Component", "Fragment", "Profiler", "PureComponent", "StrictMode", "Suspense", "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", "cloneElement", "createContext", "createElement", "createFactory", "createRef", "forwardRef", "isValidElement", "lazy", "memo", "useCallback", "useContext", "useDebugValue", "useEffect", "useImperativeHandle", "useLayoutEffect", "useMemo", "useReducer", "useRef", "useState", "version", "manager_api_default", "ActiveTabs", "Consumer", "ManagerContext", "Provider", "addons", "combineParameters", "controlOrMetaKey", "controlOrMetaSymbol", "eventMatchesShortcut", "eventToShortcut", "isMacLike", "isShortcutTaken", "keyToSymbol", "merge", "mockChannel", "optionOrAltSymbol", "shortcutMatchesShortcut", "shortcutToHumanString", "types", "useAddonState", "useArgTypes", "useArgs", "useChannel", "useGlobalTypes", "useGlobals", "useParameter", "useSharedState", "useStoryPrepared", "useStorybookApi", "useStorybookState", "components_default", "A", "ActionBar", "AddonPanel", "Badge", "Bar", "Blockquote", "Button", "Code", "DL", "Div", "DocumentWrapper", "ErrorFormatter", "FlexBar", "Form", "H1", "H2", "H3", "H4", "H5", "H6", "HR", "IconButton", "IconButtonSkeleton", "Icons", "Img", "LI", "Link", "ListItem", "Loader", "OL", "P", "Placeholder", "Pre", "ResetWrapper", "ScrollArea", "Separator", "Spaced", "Span", "StorybookIcon", "StorybookLogo", "Symbols", "SyntaxHighlighter", "TT", "TabBar", "TabButton", "TabWrapper", "Table", "Tabs", "TabsState", "TooltipLinkList", "TooltipMessage", "TooltipNote", "UL", "WithTooltip", "WithTooltipPure", "Zoom", "codeCommon", "components", "createCopyToClipboardFunction", "getStoryHref", "icons", "interleaveSeparators", "nameSpaceClassNames", "resetComponents", "withReset", "ContainerStyle", "ItemStyle", "OptionsContainer", "options", "checkedOptions", "onCheckedChange", "changeChecked", "e", "name", "actualCheckedOptions", "optionName", "createElement", "ADDON_ID", "TOOL_ID", "BooleanOpts", "getOptionsFromArgTypes", "argTypes", "options", "argName", "argValue", "BooleanOpts", "getCartesianFromOptions", "checkedOptions", "optionName", "actualOptions", "Tool", "useArgTypes", "updateArgs", "useArgs", "fileName", "useParameter", "isVisible", "setIsVisible", "useState", "setCheckedOptions", "cartesianConfig", "useEffect", "useMemo", "onCheckedChange", "actualChecked", "createElement", "WithTooltipPure", "OptionsContainer", "IconButton", "Icons", "addons", "ADDON_ID", "api", "TOOL_ID", "types", "viewMode", "react_default", "Tool"]
}

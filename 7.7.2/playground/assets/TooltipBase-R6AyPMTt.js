import{j as e,R as A,h as s}from"./iframe-qoTtUH8h.js";import{h as c}from"./react_utils-CSZjvU4X.js";import{F as C,D as F}from"./FloatingArrow-BSMg02bE.js";import{T as _}from"./Tappable-D-SlRlKJ.js";import{S as i}from"./Subhead-B5MAyB6Q.js";import{V as f}from"./VisuallyHidden-BqFtMTWb.js";import{I as h}from"./cancel_16-wfglQx50.js";const v="_host_9r1xm_1",I="_content_9r1xm_5",x="_closeButton_9r1xm_18",y="_title_9r1xm_29",V="_description_9r1xm_30",R="_arrow_9r1xm_34",T="_appearanceAccent_9r1xm_38",g="_appearanceWhite_9r1xm_47",w="_appearanceBlack_9r1xm_56",W="_appearanceInversion_9r1xm_65",u={host:v,content:I,closeButton:x,title:y,description:V,arrow:R,appearanceAccent:T,appearanceWhite:g,appearanceBlack:w,appearanceInversion:W},b=220,H={accent:u.appearanceAccent,white:u.appearanceWhite,black:u.appearanceBlack,inversion:u.appearanceInversion},p=({appearance:a="accent",arrowProps:n,ArrowIcon:E=F,description:t,title:o,titleId:B,maxWidth:r=b,closeIconLabel:d="Закрыть",onCloseIconClick:l,className:m,...D})=>e.jsxs(A,{...D,baseClassName:s(u.host,a!=="neutral"&&H[a],m),role:"tooltip",children:[n&&e.jsx(C,{...n,iconClassName:s(u.arrow,n.iconClassName),Icon:E}),e.jsxs("div",{className:u.content,style:r!==null?{maxWidth:r}:void 0,children:[e.jsxs("div",{children:[c(o)&&e.jsx(i,{id:B,className:u.title,weight:"2",children:o}),c(t)&&e.jsx(i,{className:u.description,children:t})]}),typeof l=="function"&&e.jsxs(_,{Component:"button",className:u.closeButton,hoverMode:"opacity",activeMode:"opacity",onClick:l,children:[e.jsx(f,{children:d}),e.jsx(h,{display:"block"})]})]})]});try{p.displayName="TooltipBase",p.__docgenInfo={description:"Низкоуровневый компонент для отрисовки тултипа.",displayName:"TooltipBase",props:{appearance:{defaultValue:{value:"accent"},description:"Стиль отображения подсказки.",name:"appearance",required:!1,type:{name:"enum",value:[{value:'"accent"'},{value:'"neutral"'},{value:'"white"'},{value:'"black"'},{value:'"inversion"'}]}},description:{defaultValue:null,description:"Текст тултипа.",name:"description",required:!1,type:{name:"ReactNode"}},title:{defaultValue:null,description:"Заголовок тултипа.",name:"title",required:!1,type:{name:"ReactNode"}},titleId:{defaultValue:null,description:'[a11y] Id для заголовка тултипа.\nМожно использовать для связи элемента с `role="dialog"` и заголовка через `aria-labelledby`.',name:"titleId",required:!1,type:{name:"string"}},arrowProps:{defaultValue:null,description:"Для показа указателя, требуется передать хотя бы `coords` и `placement`.",name:"arrowProps",required:!1,type:{name:'Omit<FloatingArrowProps, "Icon">'}},ArrowIcon:{defaultValue:{value:`(props: React.SVGAttributes<SVGSVGElement>): React.ReactNode => {
  return (
    <svg
      width={DEFAULT_ARROW_WIDTH}
      height={ARROW_HEIGHT_WITH_WHITE_SPACE}
      viewBox={\`0 0 \${DEFAULT_ARROW_WIDTH} \${ARROW_HEIGHT_WITH_WHITE_SPACE}\`}
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path d="M10 0c3 0 6 8 10 8v1H0V8c3.975 0 7-8 10-8Z" fill="currentColor" />
    </svg>
  );
}`},description:'Пользовательская SVG иконка.\n\nТребования:\n\n1. Иконка по умолчанию должна быть направлена вверх (a.k.a `IconUp`).\n2. Чтобы избежать проблемы с пространством между стрелкой и контентом на некоторых экранах,\n   растяните кривую по высоте на `1px` и увеличьте на этот размер `height` и `viewBox` SVG.\n   (смотри https://github.com/VKCOM/VKUI/pull/4496).\n3. Убедитесь, что компонент принимает все валидные для SVG параметры.\n4. Убедитесь, что SVG и её элементы наследует цвет через `fill="currentColor"`.\n5. Если стрелка наезжает на якорный элемент, то увеличьте смещение между целевым и всплывающим элементами.',name:"ArrowIcon",required:!1,type:{name:"ComponentType<SVGAttributes<SVGSVGElement>>"}},className:{defaultValue:null,description:"Пользовательские css-классы, будут добавлены на root-элемент.",name:"className",required:!1,type:{name:"string"}},maxWidth:{defaultValue:{value:"220"},description:"Перебивает максимальную ширину заданную по умолчанию.\n\nПередача `null` полностью сбрасывает установку `max-width` на элемент.",name:"maxWidth",required:!1,type:{name:"string | number | null"}},closeIconLabel:{defaultValue:{value:"Закрыть"},description:"Скрытый текст для кнопки закрытия.",name:"closeIconLabel",required:!1,type:{name:"string"}},onCloseIconClick:{defaultValue:null,description:"Обработчик нажатия на кнопку закрытия. При передаче, показывается иконка.",name:"onCloseIconClick",required:!1,type:{name:"((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)"}},getRootRef:{defaultValue:null,description:"",name:"getRootRef",required:!1,type:{name:"Ref<HTMLDivElement>"}}}}}catch{}export{p as T,b as a};

import{l as C,j as o,i as B}from"./iframe-CGpIZMk8.js";import{w as v}from"./withCartesian-DWT7RyrR.js";import{C as f}from"./constants-DdkjnEgz.js";import{c as A}from"./createStoryParameters-CcwS40kl.js";import{h as y}from"./react_utils-CSZjvU4X.js";import{A as _}from"./AdaptiveIconRenderer-bgOpWVtv.js";import{T as h}from"./Tappable-BEdABn7b.js";import{I as b}from"./add_24-DDJQ1FGj.js";import{I as g}from"./add_20-BZlUkjUw.js";const I="_host_1elpm_1",V="_withFakeEndIcon_1elpm_19",N="_rounded_1elpm_23",T="_sizeYRegular_1elpm_27",q="_sizeYNone_1elpm_34",R="_directionRow_1elpm_46",M="_directionColumn_1elpm_51",x="_text_1elpm_56",S="_modePrimary_1elpm_66",w="_appearanceAccent_1elpm_66",P="_hover_1elpm_70",z="_active_1elpm_74",k="_appearanceNeutral_1elpm_78",H="_modeSecondary_1elpm_91",Y="_modeTertiary_1elpm_104",j="_modeOutline_1elpm_105",u={host:I,withFakeEndIcon:V,rounded:N,sizeYRegular:T,sizeYNone:q,directionRow:R,directionColumn:M,text:x,modePrimary:S,appearanceAccent:w,hover:P,active:z,appearanceNeutral:k,modeSecondary:H,modeTertiary:Y,modeOutline:j},O={primary:u.modePrimary,secondary:u.modeSecondary,tertiary:u.modeTertiary,outline:u.modeOutline},L={accent:u.appearanceAccent,neutral:u.appearanceNeutral},W={row:u.directionRow,column:u.directionColumn},G={none:u.sizeYNone,regular:u.sizeYRegular},l=({mode:e="primary",appearance:a="accent",direction:t="row",children:s,IconCompact:p,IconRegular:F,rounded:D,...i})=>{const{sizeY:d="none"}=C(),r=y(s);return o.jsxs(h,{hoverMode:u.hover,activeMode:u.active,Component:i.href?"a":"button",focusVisibleMode:"outside",baseClassName:B(u.host,D&&J(t,r),r&&t==="row"&&u.withFakeEndIcon,O[e],L[a],W[t],d!=="compact"&&G[d]),...i,children:[o.jsx(_,{IconCompact:p,IconRegular:F}),r&&o.jsx("span",{className:u.text,children:s})]})};function J(e,a){switch(e){case"row":return u.rounded;case"column":return a?void 0:u.rounded}}try{l.displayName="ToolButton",l.__docgenInfo={description:`Кнопки, которые используются для вызова инструмента, вставки аттачей или
для форматирования. Их можно использовать как кнопки для разового действия
или для включения/выключения режима.`,displayName:"ToolButton",props:{mode:{defaultValue:{value:"primary"},description:"Режим отображения компонента.",name:"mode",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"secondary"'},{value:'"tertiary"'},{value:'"outline"'}]}},appearance:{defaultValue:{value:"accent"},description:"Внешний вид компонента.",name:"appearance",required:!1,type:{name:"enum",value:[{value:'"accent"'},{value:'"neutral"'}]}},direction:{defaultValue:{value:"row"},description:"Направление контента.",name:"direction",required:!1,type:{name:"enum",value:[{value:'"row"'},{value:'"column"'}]}},rounded:{defaultValue:null,description:'Задаёт `50%` закругления для контейнера.\n\n> Note: игнорируется при `direction="column"` если передан `children`.',name:"rounded",required:!1,type:{name:"boolean"}},borderRadiusMode:{defaultValue:null,description:"Задает border-radius элементу\nВ режиме `auto` на маленьких экранах `border-radius: 0`, иначе определяется токеном `--vkui--size_border_radius--regular`.",name:"borderRadiusMode",required:!1,type:{name:"enum",value:[{value:'"auto"'},{value:'"inherit"'}]}},activeClassName:{defaultValue:null,description:"Стиль подсветки `active`-состояния.\n@deprecated Since 7.3.0.\n\nСвойство устарело и будет удалено в `v8`, используйте свойство `activeMode`.",name:"activeClassName",required:!1,type:{name:"string"}},hoverClassName:{defaultValue:null,description:"Стиль подсветки `hover`-состояния.\n@deprecated Since 7.3.0.\n\nСвойство устарело и будет удалено в `v8`, используйте свойство `hoverMode`.",name:"hoverClassName",required:!1,type:{name:"string"}},baseClassName:{defaultValue:null,description:"@deprecated Since 7.3.0.\n\nСвойство устарело и будет удалено в `v8`, используйте свойство `className`.",name:"baseClassName",required:!1,type:{name:"string | false"}},baseStyle:{defaultValue:null,description:"@deprecated Since 7.3.0.\n\nСвойство устарело и будет удалено в `v8`, используйте свойство `style`.",name:"baseStyle",required:!1,type:{name:"CSSProperties"}},getRootRef:{defaultValue:null,description:"",name:"getRootRef",required:!1,type:{name:"Ref<HTMLElement>"}},Component:{defaultValue:null,description:"",name:"Component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},focusVisibleMode:{defaultValue:null,description:"Стиль аутлайна focus visible. Если передать произвольную строку, она добавится как css-класс при :focus-visible",name:"focusVisibleMode",required:!1,type:{name:"FocusVisibleMode"}},hasHover:{defaultValue:null,description:"Указывает, должен ли компонент реагировать на `hover`-состояние.",name:"hasHover",required:!1,type:{name:"boolean"}},hovered:{defaultValue:null,description:"Позволяет управлять `hovered`-состоянием извне.",name:"hovered",required:!1,type:{name:"boolean"}},activated:{defaultValue:null,description:"Позволяет управлять `activated`-состоянием извне.",name:"activated",required:!1,type:{name:"boolean"}},hasActive:{defaultValue:null,description:"Указывает, должен ли компонент реагировать на `active`-состояние.",name:"hasActive",required:!1,type:{name:"boolean"}},hasHoverWithChildren:{defaultValue:null,description:`Позволяет родительскому компоненту
иметь \`hovered\`-cостояние при наведении
на любой дочерний элемент.
По умолчанию состояние hovered у родителя сбрасывается.

Присваивается родителькому компоненту.
@example <Tappable hasHoverWithChildren>
  <IconButton />
  <IconButton />
  <IconButton />
</Tappable>`,name:"hasHoverWithChildren",required:!1,type:{name:"boolean"}},unlockParentHover:{defaultValue:null,description:`Позволяет родительскому компоненту показывать hovered-состояние при наведении
на текущий дочерний компонент.

Присваивается дочернему компоненту.
@example <Tappable>
  <IconButton unlockParentHover />
  <IconButton unlockParentHover />
  <IconButton />
</Tappable>`,name:"unlockParentHover",required:!1,type:{name:"boolean"}},activeEffectDelay:{defaultValue:null,description:"Длительность показа `active`-состояния.",name:"activeEffectDelay",required:!1,type:{name:"number"}},activeMode:{defaultValue:null,description:"Стиль подсветки active-состояния. Если передать произвольную строку, она добавится как css-класс во время active.",name:"activeMode",required:!1,type:{name:"StateModeLiteral"}},hoverMode:{defaultValue:null,description:"Стиль подсветки hover-состояния. Если передать произвольную строку, она добавится как css-класс во время hover.",name:"hoverMode",required:!1,type:{name:"StateModeLiteral"}},IconCompact:{defaultValue:null,description:"Компонент иконки для компактного размера.",name:"IconCompact",required:!0,type:{name:"ComponentType<{ className?: string | undefined; }>"}},IconRegular:{defaultValue:null,description:"Компонент иконки для обычного размера.",name:"IconRegular",required:!0,type:{name:"ComponentType<{ className?: string | undefined; }>"}}}}}catch{}const K={title:"Buttons/ToolButton",component:l,parameters:A("ToolButton",f),decorators:[v],tags:["Кнопки"]},n={args:{children:"ToolButton",IconCompact:g,IconRegular:b},decorators:[(e,a)=>o.jsx("div",{children:o.jsx(e,{...a.args})})]};var c,E,m;n.parameters={...n.parameters,docs:{...(c=n.parameters)==null?void 0:c.docs,source:{originalSource:`{
  args: {
    children: 'ToolButton',
    IconCompact: Icon20Add,
    IconRegular: Icon24Add
  },
  decorators: [(Component, context) => <div>
        <Component {...context.args} />
      </div>]
}`,...(m=(E=n.parameters)==null?void 0:E.docs)==null?void 0:m.source}}};const Q=["Playground"],t4=Object.freeze(Object.defineProperty({__proto__:null,Playground:n,__namedExportsOrder:Q,default:K},Symbol.toStringTag,{value:"Module"}));export{n as P,l as T,t4 as a};

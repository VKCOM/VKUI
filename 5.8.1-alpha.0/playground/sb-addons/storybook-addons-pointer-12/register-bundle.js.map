{
  "version": 3,
  "sources": ["global-externals:@storybook/manager-api", "global-externals:react", "global-externals:@storybook/components", "../../../../../../packages/vkui/.storybook/addons/pointer/constants.ts", "../../../../../../packages/vkui/.storybook/addons/pointer/HasPointer.tsx", "../../../../../../packages/vkui/.storybook/addons/pointer/register.ts"],
  "sourcesContent": ["export default __STORYBOOKAPI__;\nconst { ActiveTabs, Consumer, ManagerContext, Provider, addons, combineParameters, controlOrMetaKey, controlOrMetaSymbol, eventMatchesShortcut, eventToShortcut, isMacLike, isShortcutTaken, keyToSymbol, merge, mockChannel, optionOrAltSymbol, shortcutMatchesShortcut, shortcutToHumanString, types, useAddonState, useArgTypes, useArgs, useChannel, useGlobalTypes, useGlobals, useParameter, useSharedState, useStoryPrepared, useStorybookApi, useStorybookState } = __STORYBOOKAPI__;\nexport { ActiveTabs, Consumer, ManagerContext, Provider, addons, combineParameters, controlOrMetaKey, controlOrMetaSymbol, eventMatchesShortcut, eventToShortcut, isMacLike, isShortcutTaken, keyToSymbol, merge, mockChannel, optionOrAltSymbol, shortcutMatchesShortcut, shortcutToHumanString, types, useAddonState, useArgTypes, useArgs, useChannel, useGlobalTypes, useGlobals, useParameter, useSharedState, useStoryPrepared, useStorybookApi, useStorybookState };", "export default __REACT__;\nconst { Children, Component, Fragment, Profiler, PureComponent, StrictMode, Suspense, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, cloneElement, createContext, createElement, createFactory, createRef, forwardRef, isValidElement, lazy, memo, useCallback, useContext, useDebugValue, useEffect, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState, version } = __REACT__;\nexport { Children, Component, Fragment, Profiler, PureComponent, StrictMode, Suspense, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, cloneElement, createContext, createElement, createFactory, createRef, forwardRef, isValidElement, lazy, memo, useCallback, useContext, useDebugValue, useEffect, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState, version };", "export default __STORYBOOKCOMPONENTS__;\nconst { A, ActionBar, AddonPanel, Badge, Bar, Blockquote, Button, ClipboardCode, Code, DL, Div, DocumentWrapper, ErrorFormatter, FlexBar, Form, H1, H2, H3, H4, H5, H6, HR, IconButton, IconButtonSkeleton, Icons, Img, LI, Link, ListItem, Loader, OL, P, Placeholder, Pre, ResetWrapper, ScrollArea, Separator, Spaced, Span, StorybookIcon, StorybookLogo, Symbols, SyntaxHighlighter, TT, TabBar, TabButton, TabWrapper, Table, Tabs, TabsState, TooltipLinkList, TooltipMessage, TooltipNote, UL, WithTooltip, WithTooltipPure, Zoom, codeCommon, components, createCopyToClipboardFunction, getStoryHref, icons, interleaveSeparators, nameSpaceClassNames, resetComponents, withReset } = __STORYBOOKCOMPONENTS__;\nexport { A, ActionBar, AddonPanel, Badge, Bar, Blockquote, Button, ClipboardCode, Code, DL, Div, DocumentWrapper, ErrorFormatter, FlexBar, Form, H1, H2, H3, H4, H5, H6, HR, IconButton, IconButtonSkeleton, Icons, Img, LI, Link, ListItem, Loader, OL, P, Placeholder, Pre, ResetWrapper, ScrollArea, Separator, Spaced, Span, StorybookIcon, StorybookLogo, Symbols, SyntaxHighlighter, TT, TabBar, TabButton, TabWrapper, Table, Tabs, TabsState, TooltipLinkList, TooltipMessage, TooltipNote, UL, WithTooltip, WithTooltipPure, Zoom, codeCommon, components, createCopyToClipboardFunction, getStoryHref, icons, interleaveSeparators, nameSpaceClassNames, resetComponents, withReset };", "export const ADDON_ID = 'storybook/pointer';\nexport const PARAM_KEY = 'hasPointer';\n", "import * as React from 'react';\nimport { useGlobals } from '@storybook/manager-api';\nimport { IconButton, Icons } from '@storybook/components';\nimport { PARAM_KEY } from './constants';\n\nexport const HasPointer = () => {\n  const [globals, updateGlobals] = useGlobals();\n  const hasPointer = globals[PARAM_KEY];\n\n  const toggleHasPointer = React.useCallback(() => {\n    updateGlobals({ [PARAM_KEY]: !hasPointer });\n  }, [updateGlobals, hasPointer]);\n\n  return (\n    <IconButton active={hasPointer} key=\"pointer\" onClick={toggleHasPointer}>\n      <Icons icon=\"button\" />\n      &nbsp;\n      {`${hasPointer ? '' : 'no '}pointer`}\n    </IconButton>\n  );\n};\n", "import { addons, types } from '@storybook/manager-api';\nimport { HasPointer } from './HasPointer';\nimport { ADDON_ID } from './constants';\n\naddons.register(ADDON_ID, () => {\n  addons.add(ADDON_ID, {\n    title: 'Pointer',\n    type: types.TOOL,\n    match: ({ viewMode }) => !!(viewMode && viewMode.match(/^(story|docs)$/)),\n    render: HasPointer,\n  });\n});\n"],
  "mappings": "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",
  "names": ["manager_api_default", "ActiveTabs", "Consumer", "ManagerContext", "Provider", "addons", "combineParameters", "controlOrMetaKey", "controlOrMetaSymbol", "eventMatchesShortcut", "eventToShortcut", "isMacLike", "isShortcutTaken", "keyToSymbol", "merge", "mockChannel", "optionOrAltSymbol", "shortcutMatchesShortcut", "shortcutToHumanString", "types", "useAddonState", "useArgTypes", "useArgs", "useChannel", "useGlobalTypes", "useGlobals", "useParameter", "useSharedState", "useStoryPrepared", "useStorybookApi", "useStorybookState", "react_default", "Children", "Component", "Fragment", "Profiler", "PureComponent", "StrictMode", "Suspense", "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", "cloneElement", "createContext", "createElement", "createFactory", "createRef", "forwardRef", "isValidElement", "lazy", "memo", "useCallback", "useContext", "useDebugValue", "useEffect", "useImperativeHandle", "useLayoutEffect", "useMemo", "useReducer", "useRef", "useState", "version", "components_default", "A", "ActionBar", "AddonPanel", "Badge", "Bar", "Blockquote", "Button", "ClipboardCode", "Code", "DL", "Div", "DocumentWrapper", "ErrorFormatter", "FlexBar", "Form", "H1", "H2", "H3", "H4", "H5", "H6", "HR", "IconButton", "IconButtonSkeleton", "Icons", "Img", "LI", "Link", "ListItem", "Loader", "OL", "P", "Placeholder", "Pre", "ResetWrapper", "ScrollArea", "Separator", "Spaced", "Span", "StorybookIcon", "StorybookLogo", "Symbols", "SyntaxHighlighter", "TT", "TabBar", "TabButton", "TabWrapper", "Table", "Tabs", "TabsState", "TooltipLinkList", "TooltipMessage", "TooltipNote", "UL", "WithTooltip", "WithTooltipPure", "Zoom", "codeCommon", "components", "createCopyToClipboardFunction", "getStoryHref", "icons", "interleaveSeparators", "nameSpaceClassNames", "resetComponents", "withReset", "ADDON_ID", "PARAM_KEY", "HasPointer", "globals", "updateGlobals", "useGlobals", "hasPointer", "PARAM_KEY", "toggleHasPointer", "useCallback", "createElement", "IconButton", "Icons", "addons", "ADDON_ID", "types", "viewMode", "HasPointer"]
}

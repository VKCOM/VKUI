import{v as L,i as P,j as n}from"./iframe-BdXaAE5r.js";import{D as x,C as H}from"./constants-DdkjnEgz.js";import{g as S}from"./getFormFieldIconsPresets-DHp6rHqT.js";import{c as w}from"./createStoryParameters-CcwS40kl.js";import{F as M}from"./FormItem-Cxh1g4KJ.js";import{u as j,C as N}from"./useChipsInput-DK4aBw31.js";const t=({value:e,defaultValue:E,onChange:p,getRef:s,inputValue:d,defaultInputValue:F,onInputChange:m,getOptionValue:D,getOptionLabel:f,getNewOptionData:B,disabled:C,allowClearButton:A,delimiter:c,slotProps:a,...g})=>{const{getRootRef:h,value:V,defaultValue:y,onChange:I,disabled:l,...v}=L({getRootRef:s,value:d,defaultValue:F,onChange:m,disabled:C},a?.input),{value:r,addOptionFromInput:b,removeOption:O,clearOptions:R,inputRef:q,inputValue:i,onInputChange:_}=j({value:e,defaultValue:E,onChange:p,getOptionLabel:f,getOptionValue:D,getNewOptionData:B,inputValue:V,defaultInputValue:y,onInputChange:I,disabled:l,delimiter:c}),T=P(h,q);return n.jsx(N,{value:r,clearButtonShown:A&&(!!r.length||!!i.length),onAddChipOption:b,onRemoveChipOption:O,onClear:R,slotProps:{...a,input:{getRootRef:T,value:i,onChange:_,disabled:l,...v}},...g})};try{t.displayName="ChipsInput",t.__docgenInfo={description:"",displayName:"ChipsInput",props:{allowClearButton:{defaultValue:null,description:"Если `true`, то справа будет отображаться кнопка для очистки значения.",name:"allowClearButton",required:!1,type:{name:"boolean"}},getRef:{defaultValue:null,description:"@deprecated Since 7.9.0. Вместо этого используйте `slotProps={ input: { getRootRef: ... } }`.",name:"getRef",required:!1,type:{name:"Ref<HTMLInputElement>"}},slotProps:{defaultValue:null,description:"Свойства, которые можно прокинуть внутрь компонента:\n- `root`: свойства для прокидывания в корень компонента;\n- `input`: свойства для прокидывания в поле ввода.",name:"slotProps",required:!1,type:{name:"{ root?: (HTMLAttributes<HTMLDivElement> & HasRootRef<HTMLDivElement> & HasDataAttribute); input?: (InputHTMLAttributes<...> & ... 1 more ... & HasDataAttribute); } | undefined"}},addOnBlur:{defaultValue:null,description:"Добавляет значение в список на событие `onBlur`.",name:"addOnBlur",required:!1,type:{name:"boolean"}},renderChip:{defaultValue:{value:"Используется [Chip](#/Chip)"},description:"Render prop функция для возврата своего компонента.",name:"renderChip",required:!1,type:{name:"RenderChip<Option>"}},clearButtonShown:{defaultValue:null,description:"Показывать ли кнопку для очистки значения.",name:"clearButtonShown",required:!1,type:{name:"boolean"}},clearButtonTestId:{defaultValue:null,description:"(e2e) testId кнопки очистки.",name:"clearButtonTestId",required:!1,type:{name:"string"}},ClearButton:{defaultValue:null,description:"Кастомная кнопка для очистки значения.\nДолжна принимать обязательное свойство `onClick`.",name:"ClearButton",required:!1,type:{name:"ComponentType<FormFieldClearButtonProps>"}},chipsListLabel:{defaultValue:null,description:"`aria-label` для списка выбранных опций.",name:"chipsListLabel",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"Блокировка взаимодействия с компонентом.",name:"disabled",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:"Выбранные опции.",name:"value",required:!1,type:{name:"Option[]"}},inputValue:{defaultValue:null,description:"Значение поля ввода.",name:"inputValue",required:!1,type:{name:"string"}},onInputChange:{defaultValue:null,description:"Обработчик изменения значения в поле ввода.",name:"onInputChange",required:!1,type:{name:"OnInputChange"}},delimiter:{defaultValue:null,description:`Символ или строка, которая будет использоваться как разделитель для автоматического создания опций из текста, введенного в поле ввода.
Принимает:
- \`string\` - простая строка
- \`RegExp\` - регулярное выражение
- \`string[]\` - массив строк, по которым нужно разелять ввод.

Работает в двух сценариях:
1. При вводе разделителя - текст до разделителя автоматически преобразуется в новую опцию.
   Например, при \`delimiter=","\` ввод "опция1," создаст опцию "опция1".

2. При вставке из буфера обмена - если вставляемый текст содержит разделители,
   он будет автоматически разбит на несколько опций.
   Например, при \`delimiter=","\` вставка "опция1,опция2,опция3" создаст
   три отдельные опции: "опция1", "опция2" и "опция3".`,name:"delimiter",required:!1,type:{name:"string | RegExp | string[]"}},getRootRef:{defaultValue:null,description:"",name:"getRootRef",required:!1,type:{name:"Ref<HTMLDivElement>"}},align:{defaultValue:null,description:"",name:"align",required:!1,type:{name:"enum",value:[{value:'"center"'},{value:'"left"'},{value:'"right"'}]}},getOptionValue:{defaultValue:null,description:"Селектор значения.",name:"getOptionValue",required:!1,type:{name:"GetOptionValue<Option>"}},getOptionLabel:{defaultValue:null,description:"Селектор пользовательского представления.",name:"getOptionLabel",required:!1,type:{name:"GetOptionLabel<Option>"}},getNewOptionData:{defaultValue:null,description:"Функция для создания новой опции.",name:"getNewOptionData",required:!1,type:{name:"GetNewOptionData<Option>"}},defaultValue:{defaultValue:null,description:"Выбранные опции по умолчанию.",name:"defaultValue",required:!1,type:{name:"Option[]"}},onChange:{defaultValue:null,description:"Обработчик изменения выбранных опций.",name:"onChange",required:!1,type:{name:"OnChange<Option>"}},defaultInputValue:{defaultValue:null,description:"Значение поля ввода по умолчанию.",name:"defaultInputValue",required:!1,type:{name:"string"}},status:{defaultValue:null,description:"Статус отображения поля в форме.",name:"status",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"error"'},{value:'"valid"'}]}},after:{defaultValue:null,description:"Добавляет иконку справа.\n\nРекомендации:\n\n- Используйте следующие размеры иконок `12` | `16` | `20` | `24` | `28`.\n- Используйте [IconButton](https://vkui.io/components/icon-button), если вам нужна иконка, реагируюущая на нажатие.",name:"after",required:!1,type:{name:"ReactNode"}},before:{defaultValue:null,description:"Добавляет иконку слева.\n\nРекомендации:\n\n- Используйте следующие размеры иконок `12` | `16` | `20` | `24` | `28`.\n- Используйте [IconButton](https://vkui.io/components/icon-button), если вам нужна иконка, реагирующая на нажатие.",name:"before",required:!1,type:{name:"ReactNode"}},mode:{defaultValue:null,description:"Режим отображения.\n\n- `default` — показывает фон, обводку и, при наличии, текст-подсказку.\n- `plain` — показывает только текст-подсказку.",name:"mode",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"plain"'}]}},maxHeight:{defaultValue:null,description:"Максимальная высота поля.",name:"maxHeight",required:!1,type:{name:"number"}}}}}catch{}const{fn:G}=__STORYBOOK_MODULE_TEST__,o=S(),k={title:"Forms/ChipsInput",component:t,parameters:w("ChipsInput",H,x),args:{onInputChange:G()},argTypes:{before:o,after:o},tags:["Формы и поля ввода"]},U=[{label:"Тег 1",value:"tag-1"},{label:"Тег 2",value:"tag-2"}],u={render:e=>n.jsx(M,{top:"Добавьте любимые теги",htmlFor:"chips-input",style:{width:320},children:n.jsx(t,{...e,"aria-label":"Добавьте любимые теги",id:"chips-input"})}),args:{defaultValue:U}};u.parameters={...u.parameters,docs:{...u.parameters?.docs,source:{originalSource:`{
  render: args => <FormItem top="Добавьте любимые теги" htmlFor="chips-input" style={{
    width: 320
  }}>
      <ChipsInput {...args} aria-label="Добавьте любимые теги" id="chips-input" />
    </FormItem>,
  args: {
    defaultValue: DEFAULT_TAGS
  }
}`,...u.parameters?.docs?.source}}};const z=["Playground"],Z=Object.freeze(Object.defineProperty({__proto__:null,Playground:u,__namedExportsOrder:z,default:k},Symbol.toStringTag,{value:"Module"}));export{t as C,u as P,Z as a};

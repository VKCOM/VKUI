import{v as a,j as e,R as H,h as M}from"./iframe-BdXaAE5r.js";import{S as x,a as v}from"./SelectionControl-Y_K5dUTp.js";import{A as V}from"./AdaptiveIconRenderer-xeHgus70.js";import{V as I}from"./VisuallyHidden-DcQJc2es.js";const q="_icon_87yoo_1",A="_input_87yoo_8",j="_pin_87yoo_12",r={icon:q,input:A,pin:j};function T(t){return e.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24","aria-hidden":!0,...t,children:[e.jsx("circle",{cx:"12",cy:"12",r:"10",stroke:"currentColor",strokeWidth:"2",fill:"none"}),e.jsx("circle",{cx:"12",cy:"12",r:"7",className:r.pin,fill:"currentColor"})]})}function P(t){return e.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"20",height:"20","aria-hidden":!0,...t,children:[e.jsx("circle",{cx:"10",cy:"10",r:"7.75",stroke:"currentColor",strokeWidth:"1.5",fill:"none"}),e.jsx("circle",{cx:"10",cy:"10",r:"5.5",className:r.pin,fill:"currentColor"})]})}function E(){return e.jsx("div",{className:r.icon,children:e.jsx(V,{IconCompact:P,IconRegular:T})})}function i({className:t,style:l,getRootRef:s,getRef:u,slotProps:n,...d}){const c=a({className:t,style:l,getRootRef:s},n?.root),p=a({getRootRef:u,...d},n?.input);return e.jsxs(H,{...c,children:[e.jsx(I,{Component:"input",type:"radio",baseClassName:r.input,...p}),e.jsx(E,{})]})}try{i.displayName="RadioInput",i.__docgenInfo={description:"",displayName:"RadioInput",props:{slotProps:{defaultValue:null,description:"Свойства, которые можно прокинуть внутрь компонента:\n- `root`: свойства для прокидывания в корень компонента;\n- `input`: свойства для прокидывания в скрытый `input`.",name:"slotProps",required:!1,type:{name:'{ root?: (Omit<LabelHTMLAttributes<HTMLLabelElement>, "children"> & HasRootRef<HTMLLabelElement> & HasDataAttribute); input?: (Omit<...> & ... 1 more ... & HasDataAttribute); } | undefined'}},getRef:{defaultValue:null,description:"@deprecated Since 7.9.0. Вместо этого используйте `slotProps={ input: { getRootRef: ... } }`.",name:"getRef",required:!1,type:{name:"Ref<HTMLInputElement>"}},getRootRef:{defaultValue:null,description:"",name:"getRootRef",required:!1,type:{name:"Ref<HTMLLabelElement>"}}}}}catch{}const N="_host_ois6u_6",C={host:N},o=({children:t,description:l,style:s,className:u,getRootRef:n,titleAfter:d,getRef:c,labelProps:p,hoverMode:R,activeMode:y,hasHover:b,hasActive:h,focusVisibleMode:_,slotProps:f,...g})=>{const L=a({style:s,className:M(C.host,u),getRootRef:n,...p},f?.root),m=a({getRootRef:c,...g},f?.input);return e.jsxs(x,{hoverMode:R,activeMode:y,hasHover:b,hasActive:h,focusVisibleMode:_,disabled:m.disabled,...L,children:[e.jsx(i,{slotProps:{input:m}}),e.jsx(v,{titleAfter:d,description:l,children:t})]})};o.Input=i;try{o.displayName="Radio",o.__docgenInfo={description:"",displayName:"Radio",props:{slotProps:{defaultValue:null,description:"Свойства, которые можно прокинуть внутрь компонента:\n- `root`: свойства для прокидывания в корень компонента;\n- `input`: свойства для прокидывания в скрытый `input`.",name:"slotProps",required:!1,type:{name:'{ root?: (Omit<LabelHTMLAttributes<HTMLLabelElement>, "children"> & HasRootRef<HTMLLabelElement> & HasDataAttribute); input?: (ClassAttributes<...> & ... 2 more ... & HasDataAttribute); } | undefined'}},getRef:{defaultValue:null,description:"@deprecated Since 7.9.0. Вместо этого используйте `slotProps={ input: { getRootRef: ... } }`.",name:"getRef",required:!1,type:{name:"Ref<HTMLInputElement>"}},description:{defaultValue:null,description:"Дополнительное описание под основным текстом.",name:"description",required:!1,type:{name:"ReactNode"}},titleAfter:{defaultValue:null,description:"Элемент после основного текста.",name:"titleAfter",required:!1,type:{name:"ReactNode"}},labelProps:{defaultValue:null,description:"@deprecated Since 7.9.0. Вместо этого используйте `slotProps={ root: {...} }`.\n\nПозволяет передавать data-* аттрибуты элементу label.",name:"labelProps",required:!1,type:{name:"HasDataAttribute"}},getRootRef:{defaultValue:null,description:"",name:"getRootRef",required:!1,type:{name:"Ref<HTMLLabelElement>"}},focusVisibleMode:{defaultValue:null,description:"Стиль аутлайна focus visible. Если передать произвольную строку, она добавится как css-класс при :focus-visible",name:"focusVisibleMode",required:!1,type:{name:"FocusVisibleMode"}},hasHover:{defaultValue:null,description:"Указывает, должен ли компонент реагировать на `hover`-состояние.",name:"hasHover",required:!1,type:{name:"boolean"}},hasActive:{defaultValue:null,description:"Указывает, должен ли компонент реагировать на `active`-состояние.",name:"hasActive",required:!1,type:{name:"boolean"}},activeMode:{defaultValue:null,description:"Стиль подсветки active-состояния. Если передать произвольную строку, она добавится как css-класс во время active.",name:"activeMode",required:!1,type:{name:"StateModeLiteral"}},hoverMode:{defaultValue:null,description:"Стиль подсветки hover-состояния. Если передать произвольную строку, она добавится как css-класс во время hover.",name:"hoverMode",required:!1,type:{name:"StateModeLiteral"}}}}}catch{}try{o.Input.displayName="Radio.Input",o.Input.__docgenInfo={description:"",displayName:"Radio.Input",props:{slotProps:{defaultValue:null,description:"Свойства, которые можно прокинуть внутрь компонента:\n- `root`: свойства для прокидывания в корень компонента;\n- `input`: свойства для прокидывания в скрытый `input`.",name:"slotProps",required:!1,type:{name:'{ root?: (Omit<LabelHTMLAttributes<HTMLLabelElement>, "children"> & HasRootRef<HTMLLabelElement> & HasDataAttribute); input?: (Omit<...> & ... 1 more ... & HasDataAttribute); } | undefined'}},getRef:{defaultValue:null,description:"@deprecated Since 7.9.0. Вместо этого используйте `slotProps={ input: { getRootRef: ... } }`.",name:"getRef",required:!1,type:{name:"Ref<HTMLInputElement>"}},getRootRef:{defaultValue:null,description:"",name:"getRootRef",required:!1,type:{name:"Ref<HTMLLabelElement>"}}}}}catch{}export{o as R};

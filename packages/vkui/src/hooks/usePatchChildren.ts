import * as React from 'react';
import { getMergedSameEventsByProps } from '../helpers/getMergedSameEventsByProps';
import {
  isDOMTypeElement,
  isForwardRefElement,
  isValidNotReactFragmentElement,
} from '../lib/utils';
import type { HasRootRef } from '../types';
import { useExternRef } from './useExternRef';

type InjectProps<T> = Omit<React.HTMLAttributes<T>, keyof React.DOMAttributes<T>> &
  React.Attributes & {
    ref?: React.Ref<T>;
  };

type ExpectedReactElement<T> = React.ReactElement<HasRootRef<T> & React.DOMAttributes<T>>;

type ChildrenElement<T> =
  | ExpectedReactElement<T>
  | React.ReactText
  | React.ReactFragment
  | React.ReactPortal
  | boolean
  | null
  | undefined;

/**
 * –•—É–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–ø–∞—Ç—á–∏—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –µ–≥–æ
 * DOM-—ç–ª–µ–º–µ–Ω—Ç. –¢–∞–∫–∂–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–∫–∏–Ω—É—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
 *
 * @param children
 * @param injectProps
 * @param externRef ‚Äì –ø–æ–ª–µ–∑–µ–Ω –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–∫–∏–Ω—É—Ç—å `ref` —ç–ª–µ–º–µ–Ω—Ç—É –≤—ã—à–µ.
 *
 * üëé –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `externRef`
 * ```ts
 * const { ref } = useSomeHook();
 * const [childRef, child] = usePatchChildren(children);
 * React.useLayoutEffect(() => {
 *   ref.current = childRef.current; // –∏–ª–∏ ref.current(childRef.current)
 * }, [childRef]);
 * ```
 *
 * üëç –° –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º `externRef`
 * ```ts
 * const { ref } = useSomeHook();
 * const [childRef, child] = usePatchChildren(children, undefined, ref);
 * ```
 */
export const usePatchChildren = <ElementType extends HTMLElement = HTMLElement>(
  children?: ChildrenElement<ElementType>,
  injectProps?: InjectProps<ElementType>,
  externRef?: React.Ref<ElementType>,
): [React.MutableRefObject<ElementType | null>, ChildrenElement<ElementType> | undefined] => {
  const isValidElementResult = isValidNotReactFragmentElement(children);
  const isDOMTypeElementResult =
    isValidElementResult &&
    isDOMTypeElement<React.HTMLAttributes<ElementType>, ElementType>(children);

  const isForwardedRefElementResult =
    isValidElementResult &&
    isForwardRefElement<React.HTMLAttributes<ElementType>, ElementType>(children);

  const shouldUseRef = isDOMTypeElementResult || isForwardedRefElementResult;

  const childRef = useExternRef<ElementType>(
    shouldUseRef ? children.ref : isValidElementResult ? children.props.getRootRef : undefined,
    externRef,
  );

  const mergedEventsByInjectProps = getMergedSameEventsByProps(
    injectProps ? injectProps : {},
    isValidElementResult ? children.props : {},
  );

  const props = shouldUseRef
    ? { ref: childRef, ...injectProps, ...mergedEventsByInjectProps }
    : isValidElementResult
      ? { getRootRef: childRef, ...injectProps, ...mergedEventsByInjectProps }
      : undefined;

  return [childRef, isValidElementResult ? React.cloneElement(children, props) : children];
};

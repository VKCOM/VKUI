import * as React from 'react';
import { classNames } from '@vkontakte/vkjs';
import { useAdaptivityHasPointer } from '../../../hooks/useAdaptivityHasPointer';
import { useAppearance } from '../../../hooks/useAppearance';
import { focusVisiblePresetModeClassNames } from '../../../hooks/useFocusVisibleClassName';
import { Tappable } from '../../Tappable/Tappable';
import { ImageBaseContext } from '../context';
import type { ImageBaseExpectedIconProps } from '../types';
import { validateOverlayIcon } from '../validators';
import styles from './ImageBaseOverlay.module.css';

export interface ImageBaseOverlayProps extends React.AriaAttributes {
  /**
   * –ó–∞–¥–∞—ë—Ç —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.
   *
   * > –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `appearance` –≤ `ConfigProvider`.
   */
  theme?: 'dark' | 'light';
  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –æ–≤–µ—Ä–ª–µ–π.
   *
   * - `"on-hover"` ‚Äì –Ω–∞ –Ω–∞–≤–µ–¥–µ–Ω–∏–µ —É–∫–∞–∑–∞—Ç–µ–ª—è –º—ã—à–∏.
   * - `"always"` ‚Äì –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å.
   *
   * > –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º—ã—à—å –∏–ª–∏ –Ω–µ—Ç.
   */
  visibility?: 'on-hover' | 'always';
  /**
   * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–∫–æ–Ω–∫—É.
   *
   *
   * > üìù –ù—É–∂–Ω—ã–π –¥–ª—è `<ImageBase size={...} />` —Ä–∞–∑–º–µ—Ä –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ `getOverlayIconSizeByImageBaseSize()`.
   *
   * > –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫–∏ –∏–∑ `@vkontakte/icons`.
   *
   * > üìäÔ∏è –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–∫–æ–Ω–∫—É, —Ç–æ —Å–ª–µ–¥—É–µ—Ç –∏–º–µ–Ω–æ–≤–∞—Ç—å –µ—ë –ø–æ —à–∞–±–ª–æ–Ω—É `Icon<size><name>`. –ò–ª–∏ –∂–µ
   * > —á—Ç–æ–±—ã –≤ –Ω–µ—ë –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä `width`. –¢–æ–≥–¥–∞ –º—ã —Å–º–æ–∂–µ–º –≤—ã–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ª–∏ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã
   * > –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∏–∫–æ–Ω–∫—É.
   */
  children: React.ReactElement<ImageBaseExpectedIconProps>;
  className?: string;
  onClick?: React.MouseEventHandler<HTMLElement>;
}

/**
 * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π –Ω–∞–¥ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π.
 */
export const ImageBaseOverlay = ({
  className,
  theme: themeProp,
  visibility: visibilityProp,
  children,
  onClick,
  ...restProps
}: ImageBaseOverlayProps) => {
  const appearance = useAppearance();
  const hasPointer = useAdaptivityHasPointer();
  const theme = themeProp ?? appearance;
  const visibility = visibilityProp ?? (hasPointer ? 'on-hover' : 'always');

  if (process.env.NODE_ENV === 'development') {
    if (children) {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      const { size } = React.useContext(ImageBaseContext);
      validateOverlayIcon(size, { name: 'children', value: children });
    }
  }

  return (
    <Tappable
      {...restProps}
      type="button"
      Component="button"
      className={classNames(
        styles['ImageBaseOverlay'],
        visibility === 'always' && styles['ImageBaseOverlay--visible'],
        theme === 'light' && styles['ImageBaseOverlay--theme-light'],
        theme === 'dark' && styles['ImageBaseOverlay--theme-dark'],
        className,
      )}
      hasHover={visibility === 'on-hover'}
      hoverMode={visibility === 'on-hover' ? styles['ImageBaseOverlay--visible'] : undefined}
      focusVisibleMode={classNames(
        focusVisiblePresetModeClassNames['inside'],
        styles['ImageBaseOverlay--visible'],
      )}
      hasActive={false}
      onClick={onClick}
    >
      {children}
    </Tappable>
  );
};

import * as React from 'react';
import { classNames } from '@vkontakte/vkjs';
import { useExternRef } from '../../hooks/useExternRef';
import { minOr } from '../../lib/comparing';
import { getFetchPriorityProp } from '../../lib/utils';
import type { AnchorHTMLAttributesOnly, HasRef, HasRootRef, LiteralUnion } from '../../types';
import { Clickable } from '../Clickable/Clickable';
import { ImageBaseBadge, type ImageBaseBadgeProps } from './ImageBaseBadge/ImageBaseBadge';
import { ImageBaseOverlay, type ImageBaseOverlayProps } from './ImageBaseOverlay/ImageBaseOverlay';
import { ImageBaseContext } from './context';
import type { ImageBaseContextProps, ImageBaseExpectedIconProps, ImageBaseSize } from './types';
import { validateFallbackIcon, validateSize } from './validators';
import styles from './ImageBase.module.css';

export type {
  ImageBaseSize,
  ImageBaseExpectedIconProps,
  ImageBaseBadgeProps,
  ImageBaseOverlayProps,
  ImageBaseContextProps,
};

export {
  getBadgeIconSizeByImageBaseSize,
  getFallbackIconSizeByImageBaseSize,
  getOverlayIconSizeByImageBaseSize,
} from './helpers';

export { ImageBaseContext };

/**
 * –†–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
 */
const defaultSize = 24;

export interface ImageBaseProps
  extends React.ImgHTMLAttributes<HTMLElement>,
    AnchorHTMLAttributesOnly,
    HasRootRef<HTMLDivElement>,
    HasRef<HTMLImageElement> {
  /**
   * –ó–∞–¥–∞—ë—Ç —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏.
   *
   * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –∑–∞–¥–∞–Ω–Ω—ã–µ –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–æ–π `16 | 20 | 24 | 28 | 32 | 36 | 40 | 44 | 48 | 56 | 64 | 72 | 80 | 88 | 96`.
   *
   * > ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ ‚Äì —ç—Ç–æ –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–π –∫–µ–π—Å.
   */
  size?: LiteralUnion<ImageBaseSize, number>;
  /**
   * –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  widthSize?: number | string;
  /**
   * –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  heightSize?: number | string;
  /**
   * –û—Ç–∫–ª—é—á–∞–µ—Ç –æ–±–≤–æ–¥–∫—É.
   */
  noBorder?: boolean;
  /**
   * –§–æ–ª–±–µ–∫ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –ø—Ä–æ–≥—Ä—É–∑–∏–ª–∞—Å—å.
   *
   * > üìù –ù—É–∂–Ω—ã–π –¥–ª—è `<ImageBase size={...} />` —Ä–∞–∑–º–µ—Ä –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ `getFallbackIconSizeByImageBaseSize()`.
   *
   * > –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫–∏ –∏–∑ `@vkontakte/icons`.
   *
   * > üìäÔ∏è –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–∫–æ–Ω–∫—É, —Ç–æ —Å–ª–µ–¥—É–µ—Ç –∏–º–µ–Ω–æ–≤–∞—Ç—å –µ—ë –ø–æ —à–∞–±–ª–æ–Ω—É `Icon<size><name>`. –ò–ª–∏ –∂–µ
   * > —á—Ç–æ–±—ã –≤ –Ω–µ—ë –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä `width`. –¢–æ–≥–¥–∞ –º—ã —Å–º–æ–∂–µ–º –≤—ã–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ª–∏ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã
   * > –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∏–∫–æ–Ω–∫—É.
   *
   * > ‚ö†Ô∏è –ú–æ–∂–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å `children`.
   */
  fallbackIcon?: React.ReactElement<ImageBaseExpectedIconProps>;
  /**
   * –û—Ç–∫–ª—é—á–∞–µ—Ç —Ñ–æ–Ω, –∑–∞–¥–∞–Ω–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ü–æ–ª–µ–∑–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é.
   * @since 5.10.0
   */
  withTransparentBackground?: boolean;
  /**
   * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∏–ª—è object-fit
   * –ü–æ–¥—Ä–æ–±–Ω–µ–µ –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å –≤ [–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏](https://developer.mozilla.org/ru/docs/Web/CSS/object-fit)
   */
  objectFit?: React.CSSProperties['objectFit'];
  /**
   * –§–ª–∞–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –∫–∞—Ä—Ç–∏–Ω–∫–∏.
   * –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏
   */
  keepAspectRatio?: boolean;
}

const getObjectFitClassName = (objectFit: React.CSSProperties['objectFit']) => {
  switch (objectFit) {
    case 'contain':
      return styles['ImageBase__img--objectFit-contain'];
    case 'cover':
      return styles['ImageBase__img--objectFit-cover'];
    case 'none':
      return styles['ImageBase__img--objectFit-none'];
    case 'scale-down':
      return styles['ImageBase__img--objectFit-scaleDown'];
  }
  return undefined;
};

const parsePx = (value: string): number | undefined => {
  if (value.endsWith('px')) {
    return parseInt(value);
  }
  return undefined;
};

const sizeToNumber = (size: number | string | undefined): number | undefined => {
  if (typeof size === 'string') {
    return parsePx(size);
  }
  return size;
};

/**
 * @see https://vkcom.github.io/VKUI/#/ImageBase
 */
export const ImageBase: React.FC<ImageBaseProps> & {
  Badge: typeof ImageBaseBadge;
  Overlay: typeof ImageBaseOverlay;
} = ({
  alt,
  crossOrigin,
  decoding,
  loading,
  referrerPolicy,
  sizes,
  src,
  srcSet,
  useMap,
  fetchPriority,
  getRef,
  size: sizeProp,
  width: widthImg,
  height: heightImg,
  widthSize,
  heightSize,
  style,
  noBorder = false,
  fallbackIcon: fallbackIconProp,
  children,
  onLoad,
  onError,
  withTransparentBackground,
  objectFit = 'cover',
  keepAspectRatio = false,
  ...restProps
}: ImageBaseProps) => {
  const size = sizeProp ?? minOr([sizeToNumber(widthSize), sizeToNumber(heightSize)], defaultSize);

  const width = widthSize ?? (keepAspectRatio ? undefined : size);
  const height = heightSize ?? (keepAspectRatio ? undefined : size);

  const [loaded, setLoaded] = React.useState(false);
  const [failed, setFailed] = React.useState(false);

  const hasSrc = src || srcSet;
  const needShowFallbackIcon = (failed || !hasSrc) && React.isValidElement(fallbackIconProp);

  const fallbackIcon = needShowFallbackIcon ? fallbackIconProp : null;

  if (process.env.NODE_ENV === 'development') {
    validateSize(size);
    if (fallbackIcon) {
      validateFallbackIcon(size, { name: 'fallbackIcon', value: fallbackIcon });
    }
  }

  const handleImageLoad = (event: React.SyntheticEvent<HTMLImageElement>) => {
    if (loaded) {
      return;
    }

    setLoaded(true);
    setFailed(false);
    onLoad?.(event);
  };

  const handleImageError = (event: React.SyntheticEvent<HTMLImageElement>) => {
    setLoaded(false);
    setFailed(true);
    onError?.(event);
  };

  const imgRef = useExternRef(getRef);
  const isOnLoadStatusCheckedRef = React.useRef(false);
  React.useEffect(
    function dispatchLoadEventForAlreadyLoadedResourceIfReactInitializedLater() {
      if (isOnLoadStatusCheckedRef.current) {
        return;
      }
      isOnLoadStatusCheckedRef.current = true;

      if (imgRef.current && imgRef.current.complete && !loaded) {
        const event = new Event('load');
        imgRef.current.dispatchEvent(event);
      }
    },
    [imgRef, loaded],
  );

  return (
    <ImageBaseContext.Provider value={{ size }}>
      <Clickable
        style={{ width, height, ...style }}
        baseClassName={classNames(
          styles['ImageBase'],
          loaded && styles['ImageBase--loaded'],
          withTransparentBackground && styles['ImageBase--transparent-background'],
        )}
        {...restProps}
      >
        {hasSrc && (
          <img
            ref={imgRef}
            alt={alt}
            className={classNames(
              styles['ImageBase__img'],
              getObjectFitClassName(objectFit),
              keepAspectRatio && styles['ImageBase__img--keepRatio'],
            )}
            crossOrigin={crossOrigin}
            decoding={decoding}
            loading={loading}
            referrerPolicy={referrerPolicy}
            style={
              keepAspectRatio
                ? {
                    width: widthImg || width,
                    height: heightImg || height,
                  }
                : undefined
            }
            sizes={sizes}
            src={src}
            srcSet={srcSet}
            useMap={useMap}
            width={widthImg}
            height={heightImg}
            onLoad={handleImageLoad}
            onError={handleImageError}
            {...getFetchPriorityProp(fetchPriority)}
          />
        )}
        {fallbackIcon && <div className={styles['ImageBase__fallback']}>{fallbackIcon}</div>}
        {children && <div className={styles['ImageBase__children']}>{children}</div>}
        {!noBorder && <div aria-hidden className={styles['ImageBase__border']} />}
      </Clickable>
    </ImageBaseContext.Provider>
  );
};

ImageBase.displayName = 'ImageBase';

ImageBase.Badge = ImageBaseBadge;
ImageBase.Badge.displayName = 'ImageBase.Badge';

ImageBase.Overlay = ImageBaseOverlay;
ImageBase.Overlay.displayName = 'ImageBase.Overlay';
